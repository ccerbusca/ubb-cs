%{ 	 
#include <stdio.h>
#include <string.h>
int lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
NUMBER		[+-]?[1-9][0-9]*|0
CHARACTER 	\'[a-zA-Z0-9]\'
CONST		{WORD}|{NUMBER}|{CHARACTER}
IDENTIFIER 		[a-zA-Z]|[a-zA-Z][a-zA-Z0-9_]

%%

var            {printf("Reserved word: %s\n", yytext); return VAR;}
val              {printf("Reserved word: %s\n", yytext); return VAL;}
def            {printf("Reserved word: %s\n", yytext); return DEF;}
for               {printf("Reserved word: %s\n", yytext); return FOR;}
while             {printf("Reserved word: %s\n", yytext); return WHILE;}
if             {printf("Reserved word: %s\n", yytext); return IF;}
else             {printf("Reserved word: %s\n", yytext); return ELSE;}
println               {printf("Reserved word: %s\n", yytext); return PRINTLN;}
print              {printf("Reserved word: %s\n", yytext); return PRINT;}
Char             {printf("Reserved word: %s\n", yytext); return CHAR;}
intinput             {printf("Reserved word: %s\n", yytext); return INTINPUT;}
input             {printf("Reserved word: %s\n", yytext); return INPUT;}
break             {printf("Reserved word: %s\n", yytext); return BREAK;}
String             {printf("Reserved word: %s\n", yytext); return STRING;}
void             {printf("Reserved word: %s\n", yytext); return VOID;}
Integer             {printf("Reserved word: %s\n", yytext); return INTEGER;}
Boolean             {printf("Reserved word: %s\n", yytext); return BOOLEAN;}
Array             {printf("Reserved word: %s\n", yytext); return ARRAY;}
main             {printf("Reserved word: %s\n", yytext); return MAIN;}






{IDENTIFIER}	{printf( "Identifier: %s\n", yytext ); return IDENTIFIER_;}
{NUMBER} {printf( "Number: %s\n", yytext ); return NUMBER;}
{CHARACTER} {printf( "Character: %s\n", yytext ); return CHARACTER;}
{WORD}	{printf( "Word: %s\n", yytext ); return WORD;}


";"	    {printf( "Separator: %s\n", yytext ); return COLON;}
":"	    {printf( "Separator: %s\n", yytext ); return SEMICOLON;}
"{"	    {printf( "Separator: %s\n", yytext ); return LEFT_CURLY_BRACKET;}
"}"	    {printf( "Separator: %s\n", yytext ); return RIGHT_CURLY_BRACKET}
"("	    {printf( "Separator: %s\n", yytext ); return LEFT_BRACKET;}
")"	    {printf( "Separator: %s\n", yytext ); return RIGHT_BRACKET;}
"["	    {printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_BRACKET;}
"]"	    {printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_BRACKET;}

"+"	    {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	    {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	    {printf( "Operator: %s\n", yytext ); return STAR;}
"/"	    {printf( "Operator: %s\n", yytext ); return SLASH;}
"="	    {printf( "Operator: %s\n", yytext ); return ASSIGN;}
"=="	    {printf( "Operator: %s\n", yytext ); return EQUALS;}
"!="	    {printf( "Operator: %s\n", yytext ); return NOT_EQUALS;}
"<"	    {printf( "Operator: %s\n", yytext ); return LT;}
"<="	    {printf( "Operator: %s\n", yytext ); return LTE;}
">"	    {printf( "Operator: %s\n", yytext ); return GT;}
">="	    {printf( "Operator: %s\n", yytext ); return GTE;}
"+="	    {printf( "Operator: %s\n", yytext ); return PLUS_EQUAL;}
"-="	    {printf( "Operator: %s\n", yytext ); return MINUS_EQUAL;}
"*="	    {printf( "Operator: %s\n", yytext ); return STAR_EQUAL;}
"/="	    {printf( "Operator: %s\n", yytext ); return SLASH_EQUAL;}
"%"	    {printf( "Operator: %s\n", yytext ); return MODULO;}
".."	    {printf( "Operator: %s\n", yytext ); return ARRAY_DOTS;}
"||"	    {printf( "Operator: %s\n", yytext ); return OR;}
"&&"	    {printf( "Operator: %s\n", yytext ); return AND;}



[ \t]+  	{}

[0-9^][a-zA-Z0-9]	{printf("Illegal identifier at line %d. %s\n", yylineno, yytext); return -1;}
		 
[+-]?0[0-9]+ {printf("Illegal constant at line %d. %s\n", yylineno, yytext); return -1;}


\"[a-zA-Z0-9] {printf("Expected end of string on line %d. %s\n", yylineno, yytext); return -1;}

%%
// void main(int argc,char** argv)
// {
// if (argc > 1)
// {
//     FILE *file;
//     file = fopen(argv[1], "r");
//     if (!file)
//     {
//         fprintf(stderr, "Could not open %s\n", argv[1]);
//         exit(1);
//     }
//     yyin = file;
// }

// yylex();
// }